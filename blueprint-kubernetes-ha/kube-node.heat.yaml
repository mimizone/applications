heat_template_version: 2014-10-16

parameters:
  token:
    label: token
    type: string
  peer:
    label: peer
    type: string
  floating_network:
    label: floating_network
    type: string
  os_username:
    label: os_username
    type: string
  os_password:
    label: os_password
    type: string
  os_tenant_name:
    label: os_tenant
    type: string
  os_auth_url:
    label: os_auth
    type: string
  os_region:
    label: os_region
    type: string
  ceph:
    label: ceph
    type: boolean
  monitoring:
    label: monitoring
    type: boolean
  subnet:
    label: subnet
    type: string
  network:
    label: network
    type: string
  security_group:
    label: security_group
    type: string
  keypair_name:
    description: Keypair to inject in instance
    label: SSH Keypair
    type: string
  domain:
    description: Wildcarded domain, ex example.com must have a *.example.com DNS entry
    label: Cloud DNS
    type: string
  flavor_name:
    label: Instance Type (Flavor)
    description: Flavor to use for the deployed instance
    type: string

resources:
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      fixed_ips:
        - subnet: { get_param: subnet }
      security_groups:
        - { get_param: security_group }

  node:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: keypair_name }
      image: "CoreOS Stable 1353.7"
      flavor: { get_param: flavor_name }
      user_data_format: RAW
      networks:
        - port: { get_resource: port }
      user_data:
        str_replace:
          params:
            $private_ipv4$: { get_attr: [ port, fixed_ips, 0, ip_address ] }
            $public_ipv4$: { get_attr: [ floating_ip, floating_ip_address] }
            $domain$: { get_param: domain }
            $os_username$: { get_param: os_username }
            $os_password$: { get_param: os_password }
            $os_auth_url$: { get_param: os_auth_url }
            $os_tenant_name$: { get_param: os_tenant_name }
            $os_region$: { get_param: os_region }
            $ceph$: { get_param: ceph }
            $token$: { get_param: token }
            $peer$: { get_param: peer }
            $monitoring$: { get_param: monitoring }
          template: |
            #cloud-config
            write_files:
              - path: /opt/weave-init.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  echo WEAVE_PEERS=\"$peer$\" > /etc/weave.env
                  echo WEAVEPROXY_ARGS=\"--rewrite-inspect\" >> /etc/weave.env
                  echo WEAVE_PASSWORD=\"$token$\" >> /etc/weave.env
                  echo CHECKPOINT_DISABLE=1 >> /etc/weave.env
              - path: /opt/pidalio-init.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  NODE_NAME=$(hostname |cut -d '.' -f 1)
                  NODE_FQDN=$(hostname)
                  cat <<EOF > /etc/pidalio.etcd.rclone.conf
                  [remote]
                  type = swift
                  user = $os_username$
                  key = $os_password$
                  auth = $os_auth_url$
                  tenant = $os_tenant_name$
                  region = $os_region$
                  EOF
                  cat <<EOF > /etc/pidalio.env
                  NODE_NAME=$NODE_NAME
                  NODE_FQDN=$NODE_FQDN
                  NODE_IP=$private_ipv4$
                  NODE_PUBLIC_IP=$public_ipv4$
                  NODE_TYPE=$os_region$
                  NODE_NETWORK=master
                  NODE_STORAGE=false
                  STACK_NAME=$stack_name$
                  CEPH=$ceph$
                  CEPH_DISK=True
                  CEPH_DISK_DEVICE=/dev/vdb
                  MONITORING=$monitoring$
                  ETCD_NODES=3
                  PEER="$peer$"
                  PIDALIO_TOKEN=$token$
                  DOMAIN=$domain$
                  PATH=/opt/bin/:/usr/bin/:/usr/sbin:$PATH
                  EOF
                  if [[ -d /opt/pidalio ]]
                  then
                    echo "Pidalio already checkout"
                  else
                    git clone -b v3.5 https://github.com/juliend88/pidaliokube.git /opt/pidalio
                  fi
                  /opt/pidalio/init.sh
              - path: /opt/pidalio-units.sh
                permissions: 0700
                owner: "root:root"
                content: |
                  #!/bin/bash
                  while true; do
                    /usr/bin/fleetctl start /opt/pidalio/kube/units/pidalio.service
                    /usr/bin/fleetctl start /opt/pidalio/kube/units/master/pidalio-apiserver.service
                    /usr/bin/fleetctl start /opt/pidalio/kube/units/master/pidalio-controller.service
                    /usr/bin/fleetctl start /opt/pidalio/kube/units/master/pidalio-scheduler.service
                    /usr/bin/fleetctl start /opt/pidalio/kube/units/pidalio-proxy.service
                    /usr/bin/fleetctl start /opt/pidalio/kube/units/pidalio-node.service
                    sleep 60
                  done
            coreos:
              update:
                reboot-strategy: "off"
              fleet:
                  public-ip: "$public_ipv4$"
                  metadata: "region=$os_region$"
                  etcd_servers: "http://localhost:2379"
              units:
                - name: update-engine.service
                  command: stop
                - name: locksmithd.service
                  command: stop
                - name: 50-docker.network
                  mask: true
                - name: 50-docker-veth.network
                  mask: true
                - name: zz-default.network
                  runtime: false
                  content: |
                    # default should not match virtual Docker/weave bridge/veth network interfaces
                    [Match]
                    Name=eth*

                    [Network]
                    DHCP=yes

                    [DHCP]
                    UseMTU=true
                    UseDomains=true
                - name: etcd2.service
                  command: start
                  content: |
                    [Unit]
                    Description=etcd2
                    After=weave-network.target
                    Requires=weave-network.target
                    Conflicts=etcd.service
                    [Service]
                    EnvironmentFile=-/etc/weave.env
                    ExecStartPre=/opt/bin/weave expose
                    ExecStart=/opt/pidalio-init.sh
                    ExecStop=/usr/bin/docker rm -f etcd etcd-proxy
                    Restart=always
                    RestartSec=10s
                    LimitNOFILE=40000
                    TimeoutStartSec=5m
                    [Install]
                    WantedBy=multi-user.target
                - name: fleet.service
                  command: start
                - name: weave-network.target
                  enable: true
                  content: |
                    [Unit]
                    Description=Weave Network Setup Complete
                    Documentation=man:systemd.special(7)
                    RefuseManualStart=no
                    [Install]
                    WantedBy=multi-user.target
                - name: weave-init.service
                  command: start
                  content: |
                    [Unit]
                    Before=install-weave.service
                    Description=Install Weave
                    [Service]
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=5m
                    ExecStart=/opt/weave-init.sh
                - name: 10-weave.network
                  runtime: false
                  content: |
                    [Match]
                    Type=bridge
                    Name=weave*
                    [Network]
                - name: install-weave.service
                  enable: true
                  content: |
                    [Unit]
                    After=docker.service weave-init.service
                    Requires=docker.service weave-init.service
                    Before=weave.service
                    Description=Install Weave
                    Requires=network-online.target
                    [Service]
                    EnvironmentFile=-/etc/weave.env
                    Type=oneshot
                    RemainAfterExit=yes
                    TimeoutStartSec=5m
                    ExecStartPre=/bin/mkdir -p /opt/bin/ /opt/cni/bin /etc/cni/net.d
                    ExecStartPre=-/usr/bin/wget -O /tmp/cni.tgz https://github.com/containernetworking/cni/releases/download/v0.3.0/cni-v0.3.0.tgz
                    ExecStartPre=-/usr/bin/tar -xvzf /tmp/cni.tgz -C /opt/cni/bin/
                    ExecStartPre=/usr/bin/curl \
                      --silent \
                      --location \
                      https://github.com/weaveworks/weave/releases/download/v1.8.2/weave \
                      --output /opt/bin/weave
                    ExecStartPre=/usr/bin/chmod +x /opt/bin/weave
                    ExecStart=/opt/bin/weave setup
                    [Install]
                    WantedBy=weave-network.target
                    WantedBy=weave.service
                - name: weave.service
                  enable: true
                  content: |
                    [Unit]
                    After=install-weave.service
                    After=docker.service
                    Description=Weave Network Router
                    Documentation=http://weave.works/docs
                    Requires=docker.service
                    Requires=install-weave.service
                    [Service]
                    TimeoutStartSec=5m
                    EnvironmentFile=-/etc/weave.env
                    ExecStartPre=/opt/bin/weave launch-router $WEAVE_PEERS
                    ExecStart=/usr/bin/docker attach weave
                    Restart=on-failure
                    ExecStop=/opt/bin/weave stop-router
                    [Install]
                    WantedBy=weave-network.target
                - name: weaveproxy.service
                  enable: true
                  content: |
                    [Unit]
                    After=install-weave.service
                    After=docker.service
                    Description=Weave Network Proxy
                    Documentation=http://weave.works/docs
                    Requires=docker.service
                    Requires=install-weave.service
                    [Service]
                    TimeoutStartSec=5m
                    EnvironmentFile=-/etc/weave.env
                    ExecStartPre=/opt/bin/weave launch-proxy $WEAVEPROXY_ARGS
                    ExecStart=/usr/bin/docker attach weaveproxy
                    Restart=on-failure
                    ExecStop=/opt/bin/weave stop-proxy
                    [Install]
                    WantedBy=weave-network.target
                - name: weaveplugin.service
                  enable: true
                  content: |
                    [Unit]
                    After=install-weave.service
                    After=docker.service
                    Description=Weave Network Plugin
                    Documentation=http://weave.works/docs
                    Requires=docker.service
                    Requires=install-weave.service
                    [Service]
                    TimeoutStartSec=5m
                    EnvironmentFile=-/etc/weave.env
                    ExecStartPre=/opt/bin/weave launch-plugin
                    ExecStart=/usr/bin/docker attach weaveplugin
                    Restart=on-failure
                    ExecStop=/opt/bin/weave stop-plugin
                    [Install]
                    WantedBy=weave-network.target
                - name: pidalio-launch.service
                  command: start
                  content: |
                    [Unit]
                    After=fleet.service etcd2.service
                    Requires=fleet.service etcd2.service
                    [Service]
                    Restart=always
                    RestartSec=10
                    TimeoutStartSec=5m
                    ExecStart=/opt/pidalio-units.sh
  floating_ip_link:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: node }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: floating_network }

outputs:
  public_ip_node:
    value: {get_attr: [floating_ip, floating_ip_address]}
